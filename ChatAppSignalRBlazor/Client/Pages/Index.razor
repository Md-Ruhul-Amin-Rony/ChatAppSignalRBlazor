@page "/"
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable


<PageTitle>SignalR Chat</PageTitle>
<h3>Personal  ChatRoom</h3>
@if (!IsConnected)
{
    <div class="input-group">
        <input @bind="username" @onkeyup="HandleInput" class="form-control" placeholder="What's your name?">
        <button class="btn btn-primary form-control-append" @onclick="Connect"> Connect</button>

    </div>

}
else
{
 <textarea style="width:100%; height:500px;" @ref="TextAreaRef">
     @messages
 </textarea>  
 <div class="input-group">
     <input @bind-value="message"
            @bind-value:event="oninput"
            @onkeyup="HandleInput"
            class="form-control">
        <button class="btn btn-primary form-group-append"
            @onclick="Send"
            disabled="@(!IsConnected)">Send
        </button>
 </div>
}









@code {
    private HubConnection? hubConnection;
    private string messages = string.Empty;// this is for text area
    private string username = string.Empty;
    private string message = string.Empty;
    ElementReference TextAreaRef; //ei line ta 18 nr line er reference r eta kora hoise messagebox e scroll korar jonno and etar jonno js code likhte hbe jeta wwwroot er index.hhtml e and in this page amdr IjsRuntime ta inject korte hbe upore.



    private async Task Connect()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri($"/chathub?username={username}"))
        .Build();

        // ei /chathub tai amra Server side er prog.cs e MapHub hisebe add korsi - app.MapHub<ChatHub>("/chathub");


        hubConnection.On<string, string>("GetThatMessageDude", (user, message) =>
        {
            var msg = $"{(string.IsNullOrEmpty(user) ? "" : user + ":")}{message}";
            messages += msg + "\n";
            JSRuntime.InvokeVoidAsync("scrollToBottom", TextAreaRef);
            StateHasChanged();

        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection!=null)
        {
            await hubConnection.SendAsync("AddMessageToChat", username, message);
            //"AddMessageToChat" eta chatHubs er vitor er task method ta call kora hoise .
            message = string.Empty; // to reset the message.


        }

    }

    private async Task HandleInput(KeyboardEventArgs args)// both connect and send button a click korle jno create er kaj kore tai on click event hisebe deya hoise
    {
        //if ( args.Key.Equals("Enter"))
        //{
        //    await Send();
        //   // await Connect();

        //}
        if (args.Key.Equals("Enter"))
        {
            if (!IsConnected)
            {
                await Connect();
            }
            else
            {
                await Send();
            }
        }
        
    }


    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection!=null)
        {
            await hubConnection.DisposeAsync();

        }
        
    }


}